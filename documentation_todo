Alternative documentation 

Ideal:

- Auto generates on changes.
- Easy to see where it's been generated and to see changes.
- Easy to install on all systems.
- Elegant handling of both c++ and python.
- Does not make docstrings worse.
- Low barrier to entry to make it easier for developers to document changes.

Design:

- Use sphinx.
- Use docstrings in google style. 
  - http://www.sphinx-doc.org/en/stable/usage/extensions/example_google.html#example-google
  - https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings
- Use autodoc with napoleon to extract these docstrings.
- Have sphinx documentation as higher level documentation. Things that don't
  make sense to include in a docstring.

- Use several entr sessions to autogenerate on changes, with different actions
  for c++ changes, python changes, and sphinx changes. These entr changes
  should assume that only comments and documentation will change.
- Each major section of cpp based FreeCAD will have it's own breathe project
  and doxygen session. This will speed up build times by only processing the
  parts that have changed.

Todo:

- Done! Setup sphinx
- Done! Setup autodoc, and get it working with FreeCAD
- Done! Setup a simple autobuild on change process.
- Done! Setup breath/doxygen and get it working with documents.
- Done! Split the breath and doxygen build processes into many different breathe
  projects to speed up build times.
- Done! Setup a autobuild process for all the existing processes.
- Done! Setup napoleon and get it working with documents.
- Done! Document the installation process for a prospective documentor.
- Make a suitable theme.
- Work out a basic, readable document structure.
- Look over ongoing questions page.
- Add a style guide.

Style guide:

- Emperative writing style for methods and functions.

Negatives:

- Have to build FreeCAD each time you make a change to python, because sphinx
  is pulling the python docstrings and module structure from the build FreeCAD.
  This is due to the cython not being readable as python until it is built.
- Probably only works on linux and mac.
- Pretty complex for a documentation project.

Useful things to document in addition to Arch
- Command::doCommand()
- FreeCADGui.Snapper / Draft*....Snapper
- The property system.
- Part::Feature, Part::FeaturePython, Part::TopoShape, App::DocumentObject 
- InList and OutList system. How does that work?

Ongoing questions:
- How should properties be documented? They are clearly important. As important
  as attributes for classes.
- Should there be a template or guideline for how to document commonly
  repeating code, such as classes for objects?
- How the heck is someone supposed to know all the methods and properties that
  matter for an object/command definition? How would one know that objects
  should have an onChanged method for example?
- How should I indicate the source path to these various functions and whatnot?
- For everything that's broken up into different parts, what if I just repeat
  them in various parts, so no-one gets confused? Keep _CommandWall in both the
  ArchWall pages, and in the commands page!
- You're making a few assumptions about whether the Arch objects need to be
  <Part::FeaturePython>s or <App::FeaturePython>s.  This page on the wiki talks
  about it: https://wiki.freecadweb.org/Creating_a_FeaturePython_Box,_Part_II/en
- I should come back to each class that inherits things, and add as members, all
  the methods they use from parent classes.
- I need to better understand and document Gui/TaskView/TaskDialogPython.cpp
  What are the actual consequences of isAllowedAlterSelection and the like?
  What other cpp files define the required and useful methods for python classes?
- Is there a way to see what is subclassing the python classes in the docs?
  Something similar to the way doxygen does it?
- Is there a way to get the gui screen that flashes up each time the docs are
  rebuild to be less intrusive? Perhaps make the screen smaller?
- I should record the purposes and behaviours of the various property types.
- I should add references to the obj and vobj in the parameters of the class
  methods.
- Inconsistent capitalisation and referencing for all the various objects and
  things and groups and children and whatnot.
- Look at all of the repeated methods and functions, and figure out a
  consistent writing style for them. They vary too much.

Prettification project:

- Sidebar that follows you.
    - Should be segmented by the module you're looking at.
- Header like FreeCAD forum.
- Done! Some way to link to sourcecode.
- Spacing in between classes.
